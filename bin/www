#!/usr/bin/env node

/**
 * Module dependencies.
 */
/*
var stdio = require('stdio')
  , env = process.env
  , ops
;
ops = stdio.getopt({
  env: {args: 1, description: 'ex. dev, prod, test'}
});
env.TC_ENV = (ops.env || env.TC_ENV || 'dev');
*/
var config = require('../config');
console.log(config.port);

var app = require('../app');
var debug = require('debug')('tc:server');
var http = require('http');

var enableHttps = false;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(config.port || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

if(enableHttps) {
  var fs = require('fs');
  var https = require('https');

  var privateKey = fs.readFileSync('cert/key.pem');
  var certificate = fs.readFileSync('cert/cert.pem');

  var credentials = {key: privateKey, cert: certificate};

  var httpsServer = https.createServer(credentials, app);

  var sPort = '3008';
  httpsServer.listen(sPort);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
